(()=>{"use strict";var e={434:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\nbutton{\n\toutline:0;\n\tborder:0;\n}","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA;;;CAGC;AACD;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB;;AAEA;CACC,SAAS;CACT,QAAQ;AACT",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\nbutton{\n\toutline:0;\n\tborder:0;\n}"],sourceRoot:""}]);const l=a},772:(e,t,n)=>{n.d(t,{Z:()=>u});var r=n(537),o=n.n(r),i=n(645),a=n.n(i),l=n(667),s=n.n(l),c=new URL(n(79),n.b),A=a()(o()),d=s()(c);A.push([e.id,"@font-face {\n  font-family: bebas;\n  src: url("+d+");\n  font-weight: bold;\n}\n\n:root {\n  --table-outline-color: #e4e4ff;\n  --cell-size: 30px;\n  --bg-color: #f7f7ff;\n  --ship-cell-color: #545e75;\n  --playBtn-color: #f2d0a4;\n  --good-hit-color: #3f826d;\n  --bad-hit-color: #c03221;\n}\n\nbody {\n  font-family: bebas, sans-serif;\n  display: grid;\n  gap: 5em;\n  height: 100vh;\n  width: 100vw;\n  place-content: center;\n  background-color: var(--bg-color);\n}\n\nh1 {\n  text-align: center;\n  font-size: 100px;\n  color: var(--ship-cell-color);\n}\n#battlefields {\n  display: flex;\n  gap: 10em;\n}\n\n.board {\n  border-collapse: separate;\n  border-spacing: 1px;\n  position: relative;\n}\n\ntd {\n  outline: 2px solid var(--table-outline-color);\n  text-align: center;\n  height: var(--cell-size);\n  width: var(--cell-size);\n  position: relative;\n}\n\ntd.missed-hit {\n  background-color: var(--bad-hit-color);\n}\n\ntd.good-hit .ship-cell {\n  background-color: var(--good-hit-color);\n}\n\n#playButton {\n  font-family: bebas;\n  font-size: 50px;\n  border-radius: 10px;\n  background-color: var(--ship-cell-color);\n  color: var(--bg-color);\n}\n\n#playButton:hover,\n#playButton.started {\n  background-color: var(--good-hit-color);\n}\n\n.ship-cell {\n  height: 100%;\n  background-color: var(--ship-cell-color);\n}\n\n#myBoard .ship-cell {\n  cursor: move;\n}\n\n.ship-cell.hidden {\n  background-color: transparent;\n}\n\n.ship-cell.dragging {\n  opacity: 0.5;\n}\n\n.ghost-cell {\n  /* background-color: rgb(216, 216, 216); */\n  outline: 3px dotted;\n}\n@media screen and (max-width: 800px) {\n  body {\n    padding-top: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 5em;\n    height: auto;\n    width: 100vw;\n  }\n  h1 {\n    text-align: center;\n    font-size: 80px;\n  }\n  #battlefields {\n    /* outline: 5px solid; */\n    flex-direction: column;\n  }\n  #playButton {\n    width: 200px;\n  }\n}\n\n/* Source of hover effect : https://codepen.io/t_afif/pen/poawLeQ */\n.hover-2 {\n  --c: var(--good-hit-color); /* the color */\n  --b: 0.1em; /* border length*/\n  --d: 20px; /* the cube depth */\n\n  --_s: calc(var(--d) + var(--b));\n\n  color: var(--c);\n  border: solid #0000;\n  border-width: var(--b) var(--b) var(--_s) var(--_s);\n  background: conic-gradient(\n        at left var(--d) bottom var(--d),\n        #0000 90deg,\n        rgb(255 255 255 /0.3) 0 225deg,\n        rgb(255 255 255 /0.6) 0\n      )\n      border-box,\n    conic-gradient(at left var(--_s) bottom var(--_s), #0000 90deg, var(--c) 0)\n      0 100% / calc(100% - var(--b)) calc(100% - var(--b)) border-box;\n  transform: translate(calc(var(--d) / -1), var(--d));\n  clip-path: polygon(\n    var(--d) 0%,\n    var(--d) 0%,\n    100% 0%,\n    100% calc(100% - var(--d)),\n    100% calc(100% - var(--d)),\n    var(--d) calc(100% - var(--d))\n  );\n  transition: 0.5s;\n}\n.hover-2:hover {\n  transform: translate(0, 0);\n  clip-path: polygon(\n    0% var(--d),\n    var(--d) 0%,\n    100% 0%,\n    100% calc(100% - var(--d)),\n    calc(100% - var(--d)) 100%,\n    0% 100%\n  );\n}\n\nh3 {\n  font-family: system-ui, sans-serif;\n  font-size: 4rem;\n  margin: 0 auto;\n  cursor: pointer;\n  padding: 0 0.1em;\n}\n","",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,4CAA2B;EAC3B,iBAAiB;AACnB;;AAEA;EACE,8BAA8B;EAC9B,iBAAiB;EACjB,mBAAmB;EACnB,0BAA0B;EAC1B,wBAAwB;EACxB,yBAAyB;EACzB,wBAAwB;AAC1B;;AAEA;EACE,8BAA8B;EAC9B,aAAa;EACb,QAAQ;EACR,aAAa;EACb,YAAY;EACZ,qBAAqB;EACrB,iCAAiC;AACnC;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,6BAA6B;AAC/B;AACA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,yBAAyB;EACzB,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,6CAA6C;EAC7C,kBAAkB;EAClB,wBAAwB;EACxB,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,sCAAsC;AACxC;;AAEA;EACE,uCAAuC;AACzC;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,mBAAmB;EACnB,wCAAwC;EACxC,sBAAsB;AACxB;;AAEA;;EAEE,uCAAuC;AACzC;;AAEA;EACE,YAAY;EACZ,wCAAwC;AAC1C;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,0CAA0C;EAC1C,mBAAmB;AACrB;AACA;EACE;IACE,iBAAiB;IACjB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,QAAQ;IACR,YAAY;IACZ,YAAY;EACd;EACA;IACE,kBAAkB;IAClB,eAAe;EACjB;EACA;IACE,wBAAwB;IACxB,sBAAsB;EACxB;EACA;IACE,YAAY;EACd;AACF;;AAEA,mEAAmE;AACnE;EACE,0BAA0B,EAAE,cAAc;EAC1C,UAAU,EAAE,iBAAiB;EAC7B,SAAS,EAAE,mBAAmB;;EAE9B,+BAA+B;;EAE/B,eAAe;EACf,mBAAmB;EACnB,mDAAmD;EACnD;;;;;;;;qEAQmE;EACnE,mDAAmD;EACnD;;;;;;;GAOC;EACD,gBAAgB;AAClB;AACA;EACE,0BAA0B;EAC1B;;;;;;;GAOC;AACH;;AAEA;EACE,kCAAkC;EAClC,eAAe;EACf,cAAc;EACd,eAAe;EACf,gBAAgB;AAClB",sourcesContent:['@font-face {\n  font-family: bebas;\n  src: url("./bebasneue.ttf");\n  font-weight: bold;\n}\n\n:root {\n  --table-outline-color: #e4e4ff;\n  --cell-size: 30px;\n  --bg-color: #f7f7ff;\n  --ship-cell-color: #545e75;\n  --playBtn-color: #f2d0a4;\n  --good-hit-color: #3f826d;\n  --bad-hit-color: #c03221;\n}\n\nbody {\n  font-family: bebas, sans-serif;\n  display: grid;\n  gap: 5em;\n  height: 100vh;\n  width: 100vw;\n  place-content: center;\n  background-color: var(--bg-color);\n}\n\nh1 {\n  text-align: center;\n  font-size: 100px;\n  color: var(--ship-cell-color);\n}\n#battlefields {\n  display: flex;\n  gap: 10em;\n}\n\n.board {\n  border-collapse: separate;\n  border-spacing: 1px;\n  position: relative;\n}\n\ntd {\n  outline: 2px solid var(--table-outline-color);\n  text-align: center;\n  height: var(--cell-size);\n  width: var(--cell-size);\n  position: relative;\n}\n\ntd.missed-hit {\n  background-color: var(--bad-hit-color);\n}\n\ntd.good-hit .ship-cell {\n  background-color: var(--good-hit-color);\n}\n\n#playButton {\n  font-family: bebas;\n  font-size: 50px;\n  border-radius: 10px;\n  background-color: var(--ship-cell-color);\n  color: var(--bg-color);\n}\n\n#playButton:hover,\n#playButton.started {\n  background-color: var(--good-hit-color);\n}\n\n.ship-cell {\n  height: 100%;\n  background-color: var(--ship-cell-color);\n}\n\n#myBoard .ship-cell {\n  cursor: move;\n}\n\n.ship-cell.hidden {\n  background-color: transparent;\n}\n\n.ship-cell.dragging {\n  opacity: 0.5;\n}\n\n.ghost-cell {\n  /* background-color: rgb(216, 216, 216); */\n  outline: 3px dotted;\n}\n@media screen and (max-width: 800px) {\n  body {\n    padding-top: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 5em;\n    height: auto;\n    width: 100vw;\n  }\n  h1 {\n    text-align: center;\n    font-size: 80px;\n  }\n  #battlefields {\n    /* outline: 5px solid; */\n    flex-direction: column;\n  }\n  #playButton {\n    width: 200px;\n  }\n}\n\n/* Source of hover effect : https://codepen.io/t_afif/pen/poawLeQ */\n.hover-2 {\n  --c: var(--good-hit-color); /* the color */\n  --b: 0.1em; /* border length*/\n  --d: 20px; /* the cube depth */\n\n  --_s: calc(var(--d) + var(--b));\n\n  color: var(--c);\n  border: solid #0000;\n  border-width: var(--b) var(--b) var(--_s) var(--_s);\n  background: conic-gradient(\n        at left var(--d) bottom var(--d),\n        #0000 90deg,\n        rgb(255 255 255 /0.3) 0 225deg,\n        rgb(255 255 255 /0.6) 0\n      )\n      border-box,\n    conic-gradient(at left var(--_s) bottom var(--_s), #0000 90deg, var(--c) 0)\n      0 100% / calc(100% - var(--b)) calc(100% - var(--b)) border-box;\n  transform: translate(calc(var(--d) / -1), var(--d));\n  clip-path: polygon(\n    var(--d) 0%,\n    var(--d) 0%,\n    100% 0%,\n    100% calc(100% - var(--d)),\n    100% calc(100% - var(--d)),\n    var(--d) calc(100% - var(--d))\n  );\n  transition: 0.5s;\n}\n.hover-2:hover {\n  transform: translate(0, 0);\n  clip-path: polygon(\n    0% var(--d),\n    var(--d) 0%,\n    100% 0%,\n    100% calc(100% - var(--d)),\n    calc(100% - var(--d)) 100%,\n    0% 100%\n  );\n}\n\nh3 {\n  font-family: system-ui, sans-serif;\n  font-size: 4rem;\n  margin: 0 auto;\n  cursor: pointer;\n  padding: 0 0.1em;\n}\n'],sourceRoot:""}]);const u=A},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(a[s]=!0)}for(var c=0;c<e.length;c++){var A=[].concat(e[c]);r&&a[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),n&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=n):A[2]=n),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),t.push(A))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],l=0;l<e.length;l++){var s=e[l],c=r.base?s[0]+r.base:s[0],A=i[c]||0,d="".concat(c," ").concat(A);i[c]=A+1;var u=n(d),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)t[u].references++,t[u].updater(h);else{var f=o(h,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:f,references:1})}a.push(d)}return a}function o(e,t){var n=t.domAPI(t);n.update(e);return function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var l=n(i[a]);t[l].references--}for(var s=r(e,o),c=0;c<i.length;c++){var A=n(i[c]);0===t[A].references&&(t[A].updater(),t.splice(A,1))}i=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},79:(e,t,n)=>{e.exports=n.p+"fonts/12e3683f9192436a7be8.ttf"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),i=n(569),a=n.n(i),l=n(565),s=n.n(l),c=n(216),A=n.n(c),d=n(589),u=n.n(d),h=n(434),f={};f.styleTagTransform=u(),f.setAttributes=s(),f.insert=a().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=A();t()(h.Z,f);h.Z&&h.Z.locals&&h.Z.locals;var p=n(772),E={};E.styleTagTransform=u(),E.setAttributes=s(),E.insert=a().bind(null,"head"),E.domAPI=o(),E.insertStyleElement=A();t()(p.Z,E);p.Z&&p.Z.locals&&p.Z.locals;n(79);function g(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class C{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;if(g(this,"_board",void 0),g(this,"_shipArray",void 0),g(this,"_index",void 0),this._board=[...Array(C.BOARD_SIZE)].map((()=>Array(C.BOARD_SIZE).fill(C.EMPTY_CELL))),e!==C.MY_BOARD_INDEX&&e!==C.RIVAL_BOARD_INDEX)throw new Error(`Invalid board index ${e}`);this._index=e}get index(){return this._index}static get MY_BOARD_INDEX(){return 0}static get RIVAL_BOARD_INDEX(){return 1}static get EMPTY_CELL(){return 0}static get SHIP_CELL(){return 1}static get BOARD_SIZE(){return 10}get basicBoard(){return this._board}setCellValue(e,t){if(e<0||e>=C.BOARD_SIZE*C.BOARD_SIZE||t!==C.EMPTY_CELL&&t!==C.SHIP_CELL)throw new Error(`Cannot set cell value to ${t} at ${e}`);const n=parseInt(e/C.BOARD_SIZE,10),r=e%C.BOARD_SIZE;this._board[n][r]=t}getCellValue(e){if(e<0||e>=C.BOARD_SIZE*C.BOARD_SIZE)throw new Error(`Cannot get cell value at ${e}`);const t=parseInt(e/C.BOARD_SIZE,10),n=e%C.BOARD_SIZE;return this._board[t][n]}loadShips(e){const t=[...Array(C.BOARD_SIZE)].map((()=>Array(C.BOARD_SIZE).fill(C.EMPTY_CELL)));if(e.forEach((e=>{e.getCellPositions().forEach((e=>{t[parseInt(e/C.BOARD_SIZE,10)][e%C.BOARD_SIZE]=C.SHIP_CELL}))})),!C.validate(t))throw new Error("Invalid board configuration given by shipArray");this._board=t,this._shipArray=e}resetBoard(){this._board=[...Array(C.BOARD_SIZE)].map((()=>Array(C.BOARD_SIZE).fill(C.EMPTY_CELL))),this._shipArray=[]}getShipAt(e){if(this.getCellValue(e)!==C.SHIP_CELL)return null;for(let t=0;t<this._shipArray.length;t++)if(this._shipArray[t].getCellPositions().includes(e))return this._shipArray[t];throw new Error(`Unknown ship cell found on board at ${e}`,this._board)}moveShip(e,t){if(null===e)throw new Error("ShipObj cannot be null");if(e.headPos===t)return!1;const n=parseInt(t/C.BOARD_SIZE,10),r=t%C.BOARD_SIZE,o=e.headPos;if(e.headPos=t,!e.fitsBoard(e.isVertical))return e.headPos=o,!1;if(e.headPos=o,e.getCellPositions().forEach((e=>{this.setCellValue(e,C.EMPTY_CELL)})),e.isVertical){for(let t=n-1;t<=n+e.size;t++)if(!(t<0||t>=C.BOARD_SIZE))for(let n=r-1;n<=r+1;n++)if(!(n<0||n>=C.BOARD_SIZE)&&this._board[t][n]===C.SHIP_CELL)return e.getCellPositions().forEach((e=>{this.setCellValue(e,C.SHIP_CELL)})),!1}else for(let t=n-1;t<=n+1;t++)if(!(t<0||t>=C.BOARD_SIZE))for(let n=r-1;n<=r+e.size;n++)if(!(n<0||n>=C.BOARD_SIZE)&&this._board[t][n]===C.SHIP_CELL)return e.getCellPositions().forEach((e=>{this.setCellValue(e,C.SHIP_CELL)})),!1;return e.moveTo(t),e.getCellPositions().forEach((e=>{this.setCellValue(e,C.SHIP_CELL)})),!0}rotateShip(e){if(null===e)throw new Error("ShipObj cannot be null");if(1===e.size)return!1;const t=parseInt(e.headPos/C.BOARD_SIZE,10),n=e.headPos%C.BOARD_SIZE;if(e.isVertical){for(let r=n+2;r<=n+e.size;r++)for(let e=t-1;e<=t+1;e++)if(r>=0&&r<C.BOARD_SIZE&&e>=0&&e<C.BOARD_SIZE&&this._board[e][r]===C.SHIP_CELL)return!1}else for(let r=n-1;r<=n+1;r++)for(let n=t+2;n<=t+e.size;n++)if(r>=0&&r<C.BOARD_SIZE&&n>=0&&n<C.BOARD_SIZE&&this._board[n][r]===C.SHIP_CELL)return!1;return e.getCellPositions().forEach((e=>{this.setCellValue(e,C.EMPTY_CELL)})),e.rotate(),e.getCellPositions().forEach((e=>{this.setCellValue(e,C.SHIP_CELL)})),!0}static validate(e){function t(t,n){const r=[-1,0,1,0],o=[0,1,0,-1];for(let i=0;i<4;i++){const a=t+r[i],l=n+o[i];if(a>-1&&a<C.BOARD_SIZE&&l>-1&&l<C.BOARD_SIZE&&e[a][l]===C.SHIP_CELL)return!1}return!0}function n(t,n){const r=[-1,-1,1,1],o=[-1,1,-1,1];for(let i=0;i<4;i++){const a=t+r[i],l=n+o[i];if(a>-1&&a<C.BOARD_SIZE&&l>-1&&l<C.BOARD_SIZE&&1===e[a][l])return!0}return!1}let r=0,o=0,i=0,a=0,l=1,s=1;for(let c=0;c<C.BOARD_SIZE;c++){l=1,s=1;for(let A=0;A<C.BOARD_SIZE;A++){if(e[c][A]===C.SHIP_CELL){if(n(c,A))return!1;t(c,A)&&a++}A>0&&(e[c][A]===C.EMPTY_CELL?(4===l&&r++,3===l&&o++,2===l&&i++,l=1):e[c][A]===C.SHIP_CELL&&e[c][A-1]===C.SHIP_CELL&&l++,e[A][c]===C.EMPTY_CELL?(4===s&&r++,3===s&&o++,2===s&&i++,s=1):e[A][c]===C.SHIP_CELL&&e[A-1][c]===C.SHIP_CELL&&s++)}4===l&&r++,4===s&&r++,3===l&&o++,3===s&&o++,2===l&&i++,2===s&&i++}return 1===r&&2===o&&3===i&&4===a}getAllShipPositions(){const e=[];return this._shipArray.forEach((t=>{e.push(t.getCellPositions())})),e}}const B=C;function b(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const v=class{constructor(e){b(this,"_hit",void 0),b(this,"_position",void 0),this._position=e,this._hit=!1}get hit(){return this._hit}set hit(e){this._hit=e}set pos(e){this._position=e}get pos(){return this._position}};function m(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const _=class{constructor(e,t,n,r){if(m(this,"_vertical",void 0),m(this,"_size",void 0),m(this,"_headPos",void 0),m(this,"_boardIndex",void 0),m(this,"_life",void 0),m(this,"_cellsArray",[]),!(e>0&&e<5))throw new Error("Invalid ship size",e);if(!((0===n||1===n)&&r>=0&&r<B.BOARD_SIZE*B.BOARD_SIZE))throw new Error("Invalid ship coordinates",[n,r]);this._size=e,this._boardIndex=n,this._headPos=r,this._vertical=t,this._life=e,this.moveTo(r)}fitsBoard(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];const t=parseInt(this.headPos/B.BOARD_SIZE,10),n=this.headPos%B.BOARD_SIZE;if(e){if(t+this._size-1>=B.BOARD_SIZE)return!1}else if(n+this._size-1>=B.BOARD_SIZE)return!1;return!0}get isVertical(){return this._vertical}get size(){return this._size}set headPos(e){if(!(e>=0&&e<B.BOARD_SIZE*B.BOARD_SIZE))throw new Error(`Cannot set headPos to ${e}`);this._headPos=e}get headPos(){return this._headPos}get boardIndex(){return this._boardIndex}get cellsArray(){return this._cellsArray}moveTo(e){if(this._headPos=e,this._cellsArray=[],!this.fitsBoard(this._vertical))throw new Error(`Ship cannot be moved to #${e} (Insufficient space)`);for(let t=0;t<this._size;t++){const n=e+(this._vertical?B.BOARD_SIZE*t:t),r=new v(n);this._cellsArray.push(r)}}rotatable(){return this.fitsBoard(!this._vertical)}rotate(){if(this.rotatable()){for(let e=0;e<this._size;e++){const t=this._cellsArray[e];this._vertical?t.pos=this._headPos+e:t.pos=this._headPos+e*B.BOARD_SIZE}this._vertical=!this._vertical}}attack(e){this._cellsArray.forEach((t=>{t.pos===e&&(t.hit=!0,this._life=Math.max(this._life-1,0))}))}sunk(){return 0===this._life}getCellPositions(){return this._cellsArray.map((e=>e.pos))}},S=(()=>{let e=!1,t=!0;const n=new B(B.MY_BOARD_INDEX),r=new B(B.RIVAL_BOARD_INDEX),o=[],i=[];function a(){return t}function l(e){if(e<0||e>=B.BOARD_SIZE*B.BOARD_SIZE)throw new Error(`Cannot attack invalid coordinates ${e}`);if(t){if(o.includes(e))return!1;o.push(e)}else{if(i.includes(e))return!1;i.push(e)}return!0}function s(e){function t(e){if(e<0||e>=B.BOARD_SIZE*B.BOARD_SIZE)throw new Error(`Invalid cell position: ${e}`);const t=[],n=parseInt(e/B.BOARD_SIZE,10),r=e%B.BOARD_SIZE,o=[[-1,-1,-1,0,1,1,1,0],[-1,0,1,1,1,0,-1,-1]];for(let e=0;e<o[0].length;e++){const i=n+o[0][e],a=r+o[1][e];i>=0&&a>=0&&i<B.BOARD_SIZE&&a<B.BOARD_SIZE&&t.push(i*B.BOARD_SIZE+a)}return t}let n=Array.from(Array(B.BOARD_SIZE*B.BOARD_SIZE).keys()),r=[];const o=[];return[4,3,3,2,2,2,1,1,1,1].forEach((i=>{const a=function(e,n,r,o){let i,a=!1;const l=r.length;for(;!a;){const s=Math.random()<.5,c=r[Math.floor(Math.random()*l)];try{i=new _(e,s,n,c);const l=!i.getCellPositions().some((e=>!r.includes(e))),A=!i.getCellPositions().some((e=>t(e).some((e=>o.includes(e)))));a=l&&A}catch(e){a=!1}}return i}(i,e,n,r);o.push(a),r=[...r,...a.getCellPositions()],a.getCellPositions().forEach((e=>{const r=t(e);n=n.filter((t=>t!==e&&!r.includes(t)))}))})),o}return{getBasicBoard:function(e){return e===n.index?n.basicBoard:r.basicBoard},getAllShipPositions:function(e){return e===n.index?n.getAllShipPositions():r.getAllShipPositions()},getShipObj:function(e,t){return e===n.index?n.getShipAt(t):r.getShipAt(t)},rotateShip:function(e,t){return t===n.index?n.rotateShip(n.getShipAt(e)):r.rotateShip(r.getShipAt(e))},moveShip:function(e,t,o){return o===n.index?n.moveShip(n.getShipAt(e),t):r.moveShip(r.getShipAt(e),t)},startGame:function(){if(e)throw new Error("Cannot start an ongoing game twice");e=!0,t=!0,o.length=0,i.length=0},swapTurn:function(){if(!e)throw new Error("Cannot change turn when game has not started");t=!t},endGame:function(){if(!e)throw new Error("Cannot end a game twice");e=!1},attackBoard:l,checkWinner:function(){let e=!0,t=!0;for(let a=0;a<B.BOARD_SIZE*B.BOARD_SIZE;a++)r.getCellValue(a)!==B.SHIP_CELL||o.includes(a)||(e=!1),n.getCellValue(a)!==B.SHIP_CELL||i.includes(a)||(t=!1);return e||t},getTurn:a,gameStarted:function(){return e},initialiseBoards:function(){var e;n.resetBoard(),r.resetBoard(),n.loadShips((e=n.index,[new _(4,!0,e,0),new _(3,!0,e,3),new _(3,!1,e,5),new _(2,!1,e,38),new _(2,!0,e,60),new _(2,!0,e,84),new _(1,!1,e,99),new _(1,!0,e,19),new _(1,!0,e,90),new _(1,!1,e,59)])),r.loadShips(s(r.index))},isShip:function(e,t){return e===n.index?n.getCellValue(t)===B.SHIP_CELL:r.getCellValue(t)===B.SHIP_CELL},computerPlay:function(){if(a())throw new Error("Not computer's turn to play");let e=0;for(;!l(e);)e=parseInt(Math.random()*B.BOARD_SIZE*B.BOARD_SIZE,10);return e},getRandomFleet:s}})(),y=(()=>{const e=document.getElementById("battlefields");function t(e,t,n,r,o){const i=document.createElement(e);return t&&(i.id=t),n&&n.forEach((e=>i.classList.add(e))),r&&(i.textContent=r),o&&o.forEach((e=>i.appendChild(e))),i}function n(e){const n=t("table",e,["board"],null,null);for(let e=0;e<B.BOARD_SIZE;e++){const r=[];for(let n=0;n<B.BOARD_SIZE;n++){const o=e*B.BOARD_SIZE+n,i=t("td",null,null,null,null);i.setAttribute("data-index",o),r.push(i)}const o=t("tr",null,null,null,r);n.appendChild(o)}return n}function r(){return e.querySelector("#myBoard")}function o(){return e.querySelector("#rivalBoard")}function i(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t?e.classList.add("missed-hit"):e.classList.add("good-hit")}function a(t,n){if(0!==t&&1!==t)throw Error(`Invalid board index: ${t}`);if(!(n>=0&&n<B.BOARD_SIZE*B.BOARD_SIZE))throw Error(`Invalid cell index: ${n}`);return[...e.querySelectorAll(".board")[t].querySelectorAll("td")][n]}function l(e,t){const n=a(e,t).querySelector(".ship-cell");if(null===n)throw new Error(`No ship cell at ${t}`);return n}function s(){return document.querySelector("#playButton")}return{initialiseBoards:function(){const t=n("myBoard"),r=n("rivalBoard");e.appendChild(t),e.appendChild(r)},changePlayButtonColour:function(){s().classList.add("started")},initialiseShips:function(e,n){for(let r=0;r<B.BOARD_SIZE;r++)for(let o=0;o<B.BOARD_SIZE;o++){const i=a(n,r*B.BOARD_SIZE+o);if(e[r][o]===B.SHIP_CELL){const e=t("div",null,0===n?["ship-cell"]:["ship-cell","hidden"],null,null);i.appendChild(e)}}},displayGuess:function(){const e=[...r().querySelectorAll("td")];e[0].classList.add("missed-hit"),e[3].classList.add("missed-hit"),e[10].classList.add("good-hit"),e[20].classList.add("good-hit"),e[30].classList.add("good-hit"),o().querySelectorAll("td").forEach((e=>{e.addEventListener("click",(e=>{i(e.target,!1);e.target.getAttribute("data-index")}))}))},listenGuess:function(){o().querySelectorAll("td").forEach((e=>{e.addEventListener("click",(e=>{i(e.target)}))}))},getBoardCellElement:a,getMyShipCells:function(){return r().querySelectorAll(".ship-cell")},getShipCellElement:l,moveShipCell:function(e,t,n){if(t===n)return;const r=l(e,t),o=a(e,n);o.appendChild(r)},getCellIndex:function(e){return parseInt(e.closest("td").getAttribute("data-index"),10)},toggleGhostShip:function(e,t,n,r){let o;try{o=new _(n,r,0,t)}catch(e){return}o.getCellPositions().forEach((t=>{e?a(0,t).classList.add("ghost-cell"):a(0,t).classList.remove("ghost-cell")}))},displayWinner:function(e){s().textContent=e?"You won!":"You lost"},displayTurn:function(e){s().textContent=e?"Your turn":"..."},getPlayButton:s,getAllBoardCellElements:function(e){return 0===e?r().querySelectorAll("td"):o().querySelectorAll("td")},changeCellColor:i}})();(()=>{S.initialiseBoards(),y.initialiseBoards(),y.initialiseShips(S.getBasicBoard(B.MY_BOARD_INDEX),B.MY_BOARD_INDEX),y.initialiseShips(S.getBasicBoard(B.RIVAL_BOARD_INDEX),B.RIVAL_BOARD_INDEX);const e=y.getMyShipCells();function t(e){if(S.gameStarted())return;const t=y.getCellIndex(e.target);S.getBasicBoard(B.MY_BOARD_INDEX);const n=S.getShipObj(B.MY_BOARD_INDEX,t),r=n.getCellPositions();if(S.rotateShip(t,B.MY_BOARD_INDEX)){S.getBasicBoard(B.MY_BOARD_INDEX);const e=n.getCellPositions();for(let t=0;t<e.length;t++)y.moveShipCell(B.MY_BOARD_INDEX,r[t],e[t])}}function n(){y.displayWinner(S.getTurn()),y.getAllBoardCellElements().forEach((e=>{e.removeEventListener("click",r)})),S.endGame()}function r(e){if(!S.getTurn())return;const t=y.getCellIndex(e.target),r=y.getBoardCellElement(B.RIVAL_BOARD_INDEX,t);S.attackBoard(t)&&(y.changeCellColor(r,!S.isShip(B.RIVAL_BOARD_INDEX,t)),S.checkWinner()?n():(S.swapTurn(),y.displayTurn(S.getTurn()),function(){if(S.getTurn())return;const e=S.computerPlay();y.changeCellColor(y.getBoardCellElement(B.MY_BOARD_INDEX,e),!S.isShip(B.MY_BOARD_INDEX,e)),S.checkWinner()?n():(S.swapTurn(),y.displayTurn(S.getTurn()))}()))}S.getBasicBoard(B.MY_BOARD_INDEX),e.forEach((e=>{e.addEventListener("dblclick",t)})),function(){function t(e){const t=e.target;if(S.gameStarted())return;const n=y.getCellIndex(t);o=S.getShipObj(B.MY_BOARD_INDEX,n),o.getCellPositions().forEach((e=>{y.getShipCellElement(B.MY_BOARD_INDEX,e).classList.add("dragging")}))}function n(e){e.target;if(S.gameStarted())return;o.getCellPositions().forEach((e=>{y.getShipCellElement(B.MY_BOARD_INDEX,e).classList.remove("dragging")})),y.toggleGhostShip(!1,i,o.size,o.isVertical),S.getBasicBoard(B.MY_BOARD_INDEX);const t=o.getCellPositions();if(S.moveShip(o.headPos,i,B.MY_BOARD_INDEX)){S.getBasicBoard(0);const e=o.getCellPositions();for(let n=0;n<e.length;n++)y.moveShipCell(B.MY_BOARD_INDEX,t[n],e[n])}o=null}function r(e){const t=e.target,n=y.getCellIndex(t);if(!S.gameStarted()){if(null===o)throw new Error("Dragged ship object cannot be null at this point");i>=0&&i!==n&&y.toggleGhostShip(!1,i,o.size,o.isVertical),y.toggleGhostShip(!0,n,o.size,o.isVertical),i=n}}let o=null,i=-1;e.forEach((e=>{e.addEventListener("dragstart",t),e.addEventListener("touchstart",t)})),e.forEach((e=>{e.addEventListener("dragend",n),e.addEventListener("touchend",n)}));for(let e=0;e<B.BOARD_SIZE*B.BOARD_SIZE;e++){const t=y.getBoardCellElement(B.MY_BOARD_INDEX,e);t.addEventListener("dragover",r),t.addEventListener("touchmove",(e=>{e.preventDefault(),r(e)}),{passive:!1})}}(),y.getPlayButton().addEventListener("click",(()=>{S.startGame(),y.displayTurn(S.getTurn()),y.changePlayButtonColour(),y.getAllBoardCellElements().forEach((e=>{e.addEventListener("click",r)}))}),{once:!0})})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,