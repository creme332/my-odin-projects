/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={434:(t,e,n)=>{n.d(e,{Z:()=>l});var o=n(537),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([t.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA;;;CAGC;AACD;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}"],sourceRoot:""}]);const l=a},772:(t,e,n)=>{n.d(e,{Z:()=>l});var o=n(537),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([t.id,":root {\n  --black-cell: rgb(0, 0, 0);\n  --white-cell: #f5f5f4;\n  --explored-cell-color: #ccbfb3;\n  --neighbour-color: rgb(182, 182, 182);\n  --cell-size: 40px;\n}\n\nbody {\n  display: grid;\n  place-items: center;\n  width: 100vw;\n  min-height: 100vh;\n  background-color: var(--white-cell);\n  font-family: sans-serif;\n}\n\n#board {\n  border-collapse: separate;\n  outline: 1px solid;\n  border-spacing: 1px;\n  position: relative;\n}\n\ntd {\n  background-color: var(--black-cell);\n  position: relative;\n  text-align: center;\n  /* width: var(--cell-size);\n  height: var(--cell-size); */\n}\n\ntd,\n#horse,\n#carrot {\n  width: 3vw;\n  height: 3vw;\n}\n/* css for horse and carrot starts here */\n#horse,\n#carrot {\n  position: absolute;\n  display: grid;\n  place-items: center;\n  font-size: 2vw;\n  /* width: var(--cell-size);\n  height: var(--cell-size); */\n}\n#horse {\n  z-index: 2;\n}\n#carrot {\n  z-index: 1;\n}\n/* css for horse and carrot ends here */\n\ntr:nth-child(odd) td:nth-child(even),\ntr:nth-child(even) td:nth-child(odd) {\n  background-color: var(--white-cell);\n}\n\n#board tr td.shortest {\n  background-color: gold;\n}\n\n#board td.neighbour {\n  background-color: var(--neighbour-color);\n}\n\n#board td.hide {\n  opacity: 0.5;\n}\n\n.instruction-box {\n  margin: auto;\n  padding: 10px;\n  border-radius: 10px;\n  outline: 3px solid;\n  height: 100px;\n  width: 300px;\n}\n\n.instruction-box h1 {\n  font-size: 20px;\n  font-weight: 600;\n  margin-bottom: 7px;\n}\n\n#play-btn {\n  border: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: clamp(50px, 5vw, 500px);\n  width: clamp(50px, 5vw, 500px);\n  align-self: center;\n}\n\n.container {\n  display: flex;\n  flex-direction: column;\n  gap: 2.4em;\n}\n\n@media screen and (max-width: 600px) {\n  body {\n    padding: 10px;\n    display: block;\n    height: 100vh;\n  }\n  .container {\n    height: 100%;\n  }\n\n  td,\n  #horse,\n  #carrot {\n    width: var(--cell-size);\n    height: var(--cell-size);\n    font-size: 30px;\n  }\n}\n","",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;EACE,0BAA0B;EAC1B,qBAAqB;EACrB,8BAA8B;EAC9B,qCAAqC;EACrC,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,YAAY;EACZ,iBAAiB;EACjB,mCAAmC;EACnC,uBAAuB;AACzB;;AAEA;EACE,yBAAyB;EACzB,kBAAkB;EAClB,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,mCAAmC;EACnC,kBAAkB;EAClB,kBAAkB;EAClB;6BAC2B;AAC7B;;AAEA;;;EAGE,UAAU;EACV,WAAW;AACb;AACA,yCAAyC;AACzC;;EAEE,kBAAkB;EAClB,aAAa;EACb,mBAAmB;EACnB,cAAc;EACd;6BAC2B;AAC7B;AACA;EACE,UAAU;AACZ;AACA;EACE,UAAU;AACZ;AACA,uCAAuC;;AAEvC;;EAEE,mCAAmC;AACrC;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,wCAAwC;AAC1C;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,kBAAkB;EAClB,aAAa;EACb,YAAY;AACd;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,SAAS;EACT,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,+BAA+B;EAC/B,8BAA8B;EAC9B,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,UAAU;AACZ;;AAEA;EACE;IACE,aAAa;IACb,cAAc;IACd,aAAa;EACf;EACA;IACE,YAAY;EACd;;EAEA;;;IAGE,uBAAuB;IACvB,wBAAwB;IACxB,eAAe;EACjB;AACF",sourcesContent:[":root {\n  --black-cell: rgb(0, 0, 0);\n  --white-cell: #f5f5f4;\n  --explored-cell-color: #ccbfb3;\n  --neighbour-color: rgb(182, 182, 182);\n  --cell-size: 40px;\n}\n\nbody {\n  display: grid;\n  place-items: center;\n  width: 100vw;\n  min-height: 100vh;\n  background-color: var(--white-cell);\n  font-family: sans-serif;\n}\n\n#board {\n  border-collapse: separate;\n  outline: 1px solid;\n  border-spacing: 1px;\n  position: relative;\n}\n\ntd {\n  background-color: var(--black-cell);\n  position: relative;\n  text-align: center;\n  /* width: var(--cell-size);\n  height: var(--cell-size); */\n}\n\ntd,\n#horse,\n#carrot {\n  width: 3vw;\n  height: 3vw;\n}\n/* css for horse and carrot starts here */\n#horse,\n#carrot {\n  position: absolute;\n  display: grid;\n  place-items: center;\n  font-size: 2vw;\n  /* width: var(--cell-size);\n  height: var(--cell-size); */\n}\n#horse {\n  z-index: 2;\n}\n#carrot {\n  z-index: 1;\n}\n/* css for horse and carrot ends here */\n\ntr:nth-child(odd) td:nth-child(even),\ntr:nth-child(even) td:nth-child(odd) {\n  background-color: var(--white-cell);\n}\n\n#board tr td.shortest {\n  background-color: gold;\n}\n\n#board td.neighbour {\n  background-color: var(--neighbour-color);\n}\n\n#board td.hide {\n  opacity: 0.5;\n}\n\n.instruction-box {\n  margin: auto;\n  padding: 10px;\n  border-radius: 10px;\n  outline: 3px solid;\n  height: 100px;\n  width: 300px;\n}\n\n.instruction-box h1 {\n  font-size: 20px;\n  font-weight: 600;\n  margin-bottom: 7px;\n}\n\n#play-btn {\n  border: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: clamp(50px, 5vw, 500px);\n  width: clamp(50px, 5vw, 500px);\n  align-self: center;\n}\n\n.container {\n  display: flex;\n  flex-direction: column;\n  gap: 2.4em;\n}\n\n@media screen and (max-width: 600px) {\n  body {\n    padding: 10px;\n    display: block;\n    height: 100vh;\n  }\n  .container {\n    height: 100%;\n  }\n\n  td,\n  #horse,\n  #carrot {\n    width: var(--cell-size);\n    height: var(--cell-size);\n    font-size: 30px;\n  }\n}\n"],sourceRoot:""}]);const l=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",o=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),o&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),o&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,o,r,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(o)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(a[s]=!0)}for(var c=0;c<t.length;c++){var d=[].concat(t[c]);o&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),e.push(d))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,o=0;o<e.length;o++)if(e[o].identifier===t){n=o;break}return n}function o(t,o){for(var i={},a=[],l=0;l<t.length;l++){var s=t[l],c=o.base?s[0]+o.base:s[0],d=i[c]||0,u="".concat(c," ").concat(d);i[c]=d+1;var h=n(u),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==h)e[h].references++,e[h].updater(p);else{var f=r(p,o);o.byIndex=l,e.splice(l,0,{identifier:u,updater:f,references:1})}a.push(u)}return a}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var i=o(t=t||[],r=r||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var l=n(i[a]);e[l].references--}for(var s=o(t,r),c=0;c<i.length;c++){var d=n(i[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=s}}},569:t=>{var e={};t.exports=function(t,n){var o=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return t[o](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{var t=n(379),e=n.n(t),o=n(795),r=n.n(o),i=n(569),a=n.n(i),l=n(565),s=n.n(l),c=n(216),d=n.n(c),u=n(589),h=n.n(u),p=n(434),f={};f.styleTagTransform=h(),f.setAttributes=s(),f.insert=a().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=d(),e()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;var g=n(772),v={};function m(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function b(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?m(Object(n),!0).forEach((function(e){y(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function A(t){return A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},A(t)}function y(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function C(){return C=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t},C.apply(this,arguments)}function E(t,e){if(null==t)return{};var n,o,r=function(t,e){if(null==t)return{};var n,o,r={},i=Object.keys(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}function w(t){if("undefined"!=typeof window&&window.navigator)return!!navigator.userAgent.match(t)}v.styleTagTransform=h(),v.setAttributes=s(),v.insert=a().bind(null,"head"),v.domAPI=r(),v.insertStyleElement=d(),e()(g.Z,v),g.Z&&g.Z.locals&&g.Z.locals;var S=w(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),x=w(/Edge/i),B=w(/firefox/i),D=w(/safari/i)&&!w(/chrome/i)&&!w(/android/i),_=w(/iP(ad|od|hone)/i),T=w(/chrome/i)&&w(/android/i),k={capture:!1,passive:!1};function O(t,e,n){t.addEventListener(e,n,!S&&k)}function I(t,e,n){t.removeEventListener(e,n,!S&&k)}function M(t,e){if(e){if(">"===e[0]&&(e=e.substring(1)),t)try{if(t.matches)return t.matches(e);if(t.msMatchesSelector)return t.msMatchesSelector(e);if(t.webkitMatchesSelector)return t.webkitMatchesSelector(e)}catch(t){return!1}return!1}}function P(t){return t.host&&t!==document&&t.host.nodeType?t.host:t.parentNode}function N(t,e,n,o){if(t){n=n||document;do{if(null!=e&&(">"===e[0]?t.parentNode===n&&M(t,e):M(t,e))||o&&t===n)return t;if(t===n)break}while(t=P(t))}return null}var Y,z=/\s+/g;function R(t,e,n){if(t&&e)if(t.classList)t.classList[n?"add":"remove"](e);else{var o=(" "+t.className+" ").replace(z," ").replace(" "+e+" "," ");t.className=(o+(n?" "+e:"")).replace(z," ")}}function X(t,e,n){var o=t&&t.style;if(o){if(void 0===n)return document.defaultView&&document.defaultView.getComputedStyle?n=document.defaultView.getComputedStyle(t,""):t.currentStyle&&(n=t.currentStyle),void 0===e?n:n[e];e in o||-1!==e.indexOf("webkit")||(e="-webkit-"+e),o[e]=n+("string"==typeof n?"":"px")}}function L(t,e){var n="";if("string"==typeof t)n=t;else do{var o=X(t,"transform");o&&"none"!==o&&(n=o+" "+n)}while(!e&&(t=t.parentNode));var r=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return r&&new r(n)}function j(t,e,n){if(t){var o=t.getElementsByTagName(e),r=0,i=o.length;if(n)for(;r<i;r++)n(o[r],r);return o}return[]}function q(){return document.scrollingElement||document.documentElement}function F(t,e,n,o,r){if(t.getBoundingClientRect||t===window){var i,a,l,s,c,d,u;if(t!==window&&t.parentNode&&t!==q()?(a=(i=t.getBoundingClientRect()).top,l=i.left,s=i.bottom,c=i.right,d=i.height,u=i.width):(a=0,l=0,s=window.innerHeight,c=window.innerWidth,d=window.innerHeight,u=window.innerWidth),(e||n)&&t!==window&&(r=r||t.parentNode,!S))do{if(r&&r.getBoundingClientRect&&("none"!==X(r,"transform")||n&&"static"!==X(r,"position"))){var h=r.getBoundingClientRect();a-=h.top+parseInt(X(r,"border-top-width")),l-=h.left+parseInt(X(r,"border-left-width")),s=a+i.height,c=l+i.width;break}}while(r=r.parentNode);if(o&&t!==window){var p=L(r||t),f=p&&p.a,g=p&&p.d;p&&(s=(a/=g)+(d/=g),c=(l/=f)+(u/=f))}return{top:a,left:l,bottom:s,right:c,width:u,height:d}}}function H(t,e,n){for(var o=J(t,!0),r=F(t)[e];o;){var i=F(o)[n];if(!("top"===n||"left"===n?r>=i:r<=i))return o;if(o===q())break;o=J(o,!1)}return!1}function W(t,e,n,o){for(var r=0,i=0,a=t.children;i<a.length;){if("none"!==a[i].style.display&&a[i]!==$t.ghost&&(o||a[i]!==$t.dragged)&&N(a[i],n.draggable,t,!1)){if(r===e)return a[i];r++}i++}return null}function U(t,e){for(var n=t.lastElementChild;n&&(n===$t.ghost||"none"===X(n,"display")||e&&!M(n,e));)n=n.previousElementSibling;return n||null}function Z(t,e){var n=0;if(!t||!t.parentNode)return-1;for(;t=t.previousElementSibling;)"TEMPLATE"===t.nodeName.toUpperCase()||t===$t.clone||e&&!M(t,e)||n++;return n}function G(t){var e=0,n=0,o=q();if(t)do{var r=L(t),i=r.a,a=r.d;e+=t.scrollLeft*i,n+=t.scrollTop*a}while(t!==o&&(t=t.parentNode));return[e,n]}function J(t,e){if(!t||!t.getBoundingClientRect)return q();var n=t,o=!1;do{if(n.clientWidth<n.scrollWidth||n.clientHeight<n.scrollHeight){var r=X(n);if(n.clientWidth<n.scrollWidth&&("auto"==r.overflowX||"scroll"==r.overflowX)||n.clientHeight<n.scrollHeight&&("auto"==r.overflowY||"scroll"==r.overflowY)){if(!n.getBoundingClientRect||n===document.body)return q();if(o||e)return n;o=!0}}}while(n=n.parentNode);return q()}function V(t,e){return Math.round(t.top)===Math.round(e.top)&&Math.round(t.left)===Math.round(e.left)&&Math.round(t.height)===Math.round(e.height)&&Math.round(t.width)===Math.round(e.width)}function $(t,e){return function(){if(!Y){var n=arguments,o=this;1===n.length?t.call(o,n[0]):t.apply(o,n),Y=setTimeout((function(){Y=void 0}),e)}}}function K(t,e,n){t.scrollLeft+=e,t.scrollTop+=n}function Q(t){var e=window.Polymer,n=window.jQuery||window.Zepto;return e&&e.dom?e.dom(t).cloneNode(!0):n?n(t).clone(!0)[0]:t.cloneNode(!0)}var tt="Sortable"+(new Date).getTime();var et=[],nt={initializeByDefault:!0},ot={mount:function(t){for(var e in nt)nt.hasOwnProperty(e)&&!(e in t)&&(t[e]=nt[e]);et.forEach((function(e){if(e.pluginName===t.pluginName)throw"Sortable: Cannot mount plugin ".concat(t.pluginName," more than once")})),et.push(t)},pluginEvent:function(t,e,n){var o=this;this.eventCanceled=!1,n.cancel=function(){o.eventCanceled=!0};var r=t+"Global";et.forEach((function(o){e[o.pluginName]&&(e[o.pluginName][r]&&e[o.pluginName][r](b({sortable:e},n)),e.options[o.pluginName]&&e[o.pluginName][t]&&e[o.pluginName][t](b({sortable:e},n)))}))},initializePlugins:function(t,e,n,o){for(var r in et.forEach((function(o){var r=o.pluginName;if(t.options[r]||o.initializeByDefault){var i=new o(t,e,t.options);i.sortable=t,i.options=t.options,t[r]=i,C(n,i.defaults)}})),t.options)if(t.options.hasOwnProperty(r)){var i=this.modifyOption(t,r,t.options[r]);void 0!==i&&(t.options[r]=i)}},getEventProperties:function(t,e){var n={};return et.forEach((function(o){"function"==typeof o.eventProperties&&C(n,o.eventProperties.call(e[o.pluginName],t))})),n},modifyOption:function(t,e,n){var o;return et.forEach((function(r){t[r.pluginName]&&r.optionListeners&&"function"==typeof r.optionListeners[e]&&(o=r.optionListeners[e].call(t[r.pluginName],n))})),o}};var rt=["evt"],it=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=n.evt,r=E(n,rt);ot.pluginEvent.bind($t)(t,e,b({dragEl:lt,parentEl:st,ghostEl:ct,rootEl:dt,nextEl:ut,lastDownEl:ht,cloneEl:pt,cloneHidden:ft,dragStarted:Dt,putSortable:yt,activeSortable:$t.active,originalEvent:o,oldIndex:gt,oldDraggableIndex:mt,newIndex:vt,newDraggableIndex:bt,hideGhostForTarget:Zt,unhideGhostForTarget:Gt,cloneNowHidden:function(){ft=!0},cloneNowShown:function(){ft=!1},dispatchSortableEvent:function(t){at({sortable:e,name:t,originalEvent:o})}},r))};function at(t){!function(t){var e=t.sortable,n=t.rootEl,o=t.name,r=t.targetEl,i=t.cloneEl,a=t.toEl,l=t.fromEl,s=t.oldIndex,c=t.newIndex,d=t.oldDraggableIndex,u=t.newDraggableIndex,h=t.originalEvent,p=t.putSortable,f=t.extraEventProperties;if(e=e||n&&n[tt]){var g,v=e.options,m="on"+o.charAt(0).toUpperCase()+o.substr(1);!window.CustomEvent||S||x?(g=document.createEvent("Event")).initEvent(o,!0,!0):g=new CustomEvent(o,{bubbles:!0,cancelable:!0}),g.to=a||n,g.from=l||n,g.item=r||n,g.clone=i,g.oldIndex=s,g.newIndex=c,g.oldDraggableIndex=d,g.newDraggableIndex=u,g.originalEvent=h,g.pullMode=p?p.lastPutMode:void 0;var A=b(b({},f),ot.getEventProperties(o,e));for(var y in A)g[y]=A[y];n&&n.dispatchEvent(g),v[m]&&v[m].call(e,g)}}(b({putSortable:yt,cloneEl:pt,targetEl:lt,rootEl:dt,oldIndex:gt,oldDraggableIndex:mt,newIndex:vt,newDraggableIndex:bt},t))}var lt,st,ct,dt,ut,ht,pt,ft,gt,vt,mt,bt,At,yt,Ct,Et,wt,St,xt,Bt,Dt,_t,Tt,kt,Ot,It=!1,Mt=!1,Pt=[],Nt=!1,Yt=!1,zt=[],Rt=!1,Xt=[],Lt="undefined"!=typeof document,jt=_,qt=x||S?"cssFloat":"float",Ft=Lt&&!T&&!_&&"draggable"in document.createElement("div"),Ht=function(){if(Lt){if(S)return!1;var t=document.createElement("x");return t.style.cssText="pointer-events:auto","auto"===t.style.pointerEvents}}(),Wt=function(t,e){var n=X(t),o=parseInt(n.width)-parseInt(n.paddingLeft)-parseInt(n.paddingRight)-parseInt(n.borderLeftWidth)-parseInt(n.borderRightWidth),r=W(t,0,e),i=W(t,1,e),a=r&&X(r),l=i&&X(i),s=a&&parseInt(a.marginLeft)+parseInt(a.marginRight)+F(r).width,c=l&&parseInt(l.marginLeft)+parseInt(l.marginRight)+F(i).width;if("flex"===n.display)return"column"===n.flexDirection||"column-reverse"===n.flexDirection?"vertical":"horizontal";if("grid"===n.display)return n.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(r&&a.float&&"none"!==a.float){var d="left"===a.float?"left":"right";return!i||"both"!==l.clear&&l.clear!==d?"horizontal":"vertical"}return r&&("block"===a.display||"flex"===a.display||"table"===a.display||"grid"===a.display||s>=o&&"none"===n[qt]||i&&"none"===n[qt]&&s+c>o)?"vertical":"horizontal"},Ut=function(t){function e(t,n){return function(o,r,i,a){var l=o.options.group.name&&r.options.group.name&&o.options.group.name===r.options.group.name;if(null==t&&(n||l))return!0;if(null==t||!1===t)return!1;if(n&&"clone"===t)return t;if("function"==typeof t)return e(t(o,r,i,a),n)(o,r,i,a);var s=(n?o:r).options.group.name;return!0===t||"string"==typeof t&&t===s||t.join&&t.indexOf(s)>-1}}var n={},o=t.group;o&&"object"==A(o)||(o={name:o}),n.name=o.name,n.checkPull=e(o.pull,!0),n.checkPut=e(o.put),n.revertClone=o.revertClone,t.group=n},Zt=function(){!Ht&&ct&&X(ct,"display","none")},Gt=function(){!Ht&&ct&&X(ct,"display","")};Lt&&!T&&document.addEventListener("click",(function(t){if(Mt)return t.preventDefault(),t.stopPropagation&&t.stopPropagation(),t.stopImmediatePropagation&&t.stopImmediatePropagation(),Mt=!1,!1}),!0);var Jt=function(t){if(lt){t=t.touches?t.touches[0]:t;var e=(r=t.clientX,i=t.clientY,Pt.some((function(t){var e=t[tt].options.emptyInsertThreshold;if(e&&!U(t)){var n=F(t),o=r>=n.left-e&&r<=n.right+e,l=i>=n.top-e&&i<=n.bottom+e;return o&&l?a=t:void 0}})),a);if(e){var n={};for(var o in t)t.hasOwnProperty(o)&&(n[o]=t[o]);n.target=n.rootEl=e,n.preventDefault=void 0,n.stopPropagation=void 0,e[tt]._onDragOver(n)}}var r,i,a},Vt=function(t){lt&&lt.parentNode[tt]._isOutsideThisEl(t.target)};function $t(t,e){if(!t||!t.nodeType||1!==t.nodeType)throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(t));this.el=t,this.options=e=C({},e),t[tt]=this;var n,o,r={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(t.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return Wt(t,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(t,e){t.setData("Text",e.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:!1!==$t.supportPointer&&"PointerEvent"in window&&!D,emptyInsertThreshold:5};for(var i in ot.initializePlugins(this,t,r),r)!(i in e)&&(e[i]=r[i]);for(var a in Ut(e),this)"_"===a.charAt(0)&&"function"==typeof this[a]&&(this[a]=this[a].bind(this));this.nativeDraggable=!e.forceFallback&&Ft,this.nativeDraggable&&(this.options.touchStartThreshold=1),e.supportPointer?O(t,"pointerdown",this._onTapStart):(O(t,"mousedown",this._onTapStart),O(t,"touchstart",this._onTapStart)),this.nativeDraggable&&(O(t,"dragover",this),O(t,"dragenter",this)),Pt.push(this.el),e.store&&e.store.get&&this.sort(e.store.get(this)||[]),C(this,(o=[],{captureAnimationState:function(){o=[],this.options.animation&&[].slice.call(this.el.children).forEach((function(t){if("none"!==X(t,"display")&&t!==$t.ghost){o.push({target:t,rect:F(t)});var e=b({},o[o.length-1].rect);if(t.thisAnimationDuration){var n=L(t,!0);n&&(e.top-=n.f,e.left-=n.e)}t.fromRect=e}}))},addAnimationState:function(t){o.push(t)},removeAnimationState:function(t){o.splice(function(t,e){for(var n in t)if(t.hasOwnProperty(n))for(var o in e)if(e.hasOwnProperty(o)&&e[o]===t[n][o])return Number(n);return-1}(o,{target:t}),1)},animateAll:function(t){var e=this;if(!this.options.animation)return clearTimeout(n),void("function"==typeof t&&t());var r=!1,i=0;o.forEach((function(t){var n=0,o=t.target,a=o.fromRect,l=F(o),s=o.prevFromRect,c=o.prevToRect,d=t.rect,u=L(o,!0);u&&(l.top-=u.f,l.left-=u.e),o.toRect=l,o.thisAnimationDuration&&V(s,l)&&!V(a,l)&&(d.top-l.top)/(d.left-l.left)==(a.top-l.top)/(a.left-l.left)&&(n=function(t,e,n,o){return Math.sqrt(Math.pow(e.top-t.top,2)+Math.pow(e.left-t.left,2))/Math.sqrt(Math.pow(e.top-n.top,2)+Math.pow(e.left-n.left,2))*o.animation}(d,s,c,e.options)),V(l,a)||(o.prevFromRect=a,o.prevToRect=l,n||(n=e.options.animation),e.animate(o,d,l,n)),n&&(r=!0,i=Math.max(i,n),clearTimeout(o.animationResetTimer),o.animationResetTimer=setTimeout((function(){o.animationTime=0,o.prevFromRect=null,o.fromRect=null,o.prevToRect=null,o.thisAnimationDuration=null}),n),o.thisAnimationDuration=n)})),clearTimeout(n),r?n=setTimeout((function(){"function"==typeof t&&t()}),i):"function"==typeof t&&t(),o=[]},animate:function(t,e,n,o){if(o){X(t,"transition",""),X(t,"transform","");var r=L(this.el),i=r&&r.a,a=r&&r.d,l=(e.left-n.left)/(i||1),s=(e.top-n.top)/(a||1);t.animatingX=!!l,t.animatingY=!!s,X(t,"transform","translate3d("+l+"px,"+s+"px,0)"),this.forRepaintDummy=function(t){return t.offsetWidth}(t),X(t,"transition","transform "+o+"ms"+(this.options.easing?" "+this.options.easing:"")),X(t,"transform","translate3d(0,0,0)"),"number"==typeof t.animated&&clearTimeout(t.animated),t.animated=setTimeout((function(){X(t,"transition",""),X(t,"transform",""),t.animated=!1,t.animatingX=!1,t.animatingY=!1}),o)}}}))}function Kt(t,e,n,o,r,i,a,l){var s,c,d=t[tt],u=d.options.onMove;return!window.CustomEvent||S||x?(s=document.createEvent("Event")).initEvent("move",!0,!0):s=new CustomEvent("move",{bubbles:!0,cancelable:!0}),s.to=e,s.from=t,s.dragged=n,s.draggedRect=o,s.related=r||e,s.relatedRect=i||F(e),s.willInsertAfter=l,s.originalEvent=a,t.dispatchEvent(s),u&&(c=u.call(d,s,a)),c}function Qt(t){t.draggable=!1}function te(){Rt=!1}function ee(t){for(var e=t.tagName+t.className+t.src+t.href+t.textContent,n=e.length,o=0;n--;)o+=e.charCodeAt(n);return o.toString(36)}function ne(t){return setTimeout(t,0)}function oe(t){return clearTimeout(t)}$t.prototype={constructor:$t,_isOutsideThisEl:function(t){this.el.contains(t)||t===this.el||(_t=null)},_getDirection:function(t,e){return"function"==typeof this.options.direction?this.options.direction.call(this,t,e,lt):this.options.direction},_onTapStart:function(t){if(t.cancelable){var e=this,n=this.el,o=this.options,r=o.preventOnFilter,i=t.type,a=t.touches&&t.touches[0]||t.pointerType&&"touch"===t.pointerType&&t,l=(a||t).target,s=t.target.shadowRoot&&(t.path&&t.path[0]||t.composedPath&&t.composedPath()[0])||l,c=o.filter;if(function(t){Xt.length=0;for(var e=t.getElementsByTagName("input"),n=e.length;n--;){var o=e[n];o.checked&&Xt.push(o)}}(n),!lt&&!(/mousedown|pointerdown/.test(i)&&0!==t.button||o.disabled)&&!s.isContentEditable&&(this.nativeDraggable||!D||!l||"SELECT"!==l.tagName.toUpperCase())&&!((l=N(l,o.draggable,n,!1))&&l.animated||ht===l)){if(gt=Z(l),mt=Z(l,o.draggable),"function"==typeof c){if(c.call(this,t,l,this))return at({sortable:e,rootEl:s,name:"filter",targetEl:l,toEl:n,fromEl:n}),it("filter",e,{evt:t}),void(r&&t.cancelable&&t.preventDefault())}else if(c&&(c=c.split(",").some((function(o){if(o=N(s,o.trim(),n,!1))return at({sortable:e,rootEl:o,name:"filter",targetEl:l,fromEl:n,toEl:n}),it("filter",e,{evt:t}),!0}))))return void(r&&t.cancelable&&t.preventDefault());o.handle&&!N(s,o.handle,n,!1)||this._prepareDragStart(t,a,l)}}},_prepareDragStart:function(t,e,n){var o,r=this,i=r.el,a=r.options,l=i.ownerDocument;if(n&&!lt&&n.parentNode===i){var s=F(n);if(dt=i,st=(lt=n).parentNode,ut=lt.nextSibling,ht=n,At=a.group,$t.dragged=lt,Ct={target:lt,clientX:(e||t).clientX,clientY:(e||t).clientY},xt=Ct.clientX-s.left,Bt=Ct.clientY-s.top,this._lastX=(e||t).clientX,this._lastY=(e||t).clientY,lt.style["will-change"]="all",o=function(){it("delayEnded",r,{evt:t}),$t.eventCanceled?r._onDrop():(r._disableDelayedDragEvents(),!B&&r.nativeDraggable&&(lt.draggable=!0),r._triggerDragStart(t,e),at({sortable:r,name:"choose",originalEvent:t}),R(lt,a.chosenClass,!0))},a.ignore.split(",").forEach((function(t){j(lt,t.trim(),Qt)})),O(l,"dragover",Jt),O(l,"mousemove",Jt),O(l,"touchmove",Jt),O(l,"mouseup",r._onDrop),O(l,"touchend",r._onDrop),O(l,"touchcancel",r._onDrop),B&&this.nativeDraggable&&(this.options.touchStartThreshold=4,lt.draggable=!0),it("delayStart",this,{evt:t}),!a.delay||a.delayOnTouchOnly&&!e||this.nativeDraggable&&(x||S))o();else{if($t.eventCanceled)return void this._onDrop();O(l,"mouseup",r._disableDelayedDrag),O(l,"touchend",r._disableDelayedDrag),O(l,"touchcancel",r._disableDelayedDrag),O(l,"mousemove",r._delayedDragTouchMoveHandler),O(l,"touchmove",r._delayedDragTouchMoveHandler),a.supportPointer&&O(l,"pointermove",r._delayedDragTouchMoveHandler),r._dragStartTimer=setTimeout(o,a.delay)}}},_delayedDragTouchMoveHandler:function(t){var e=t.touches?t.touches[0]:t;Math.max(Math.abs(e.clientX-this._lastX),Math.abs(e.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){lt&&Qt(lt),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var t=this.el.ownerDocument;I(t,"mouseup",this._disableDelayedDrag),I(t,"touchend",this._disableDelayedDrag),I(t,"touchcancel",this._disableDelayedDrag),I(t,"mousemove",this._delayedDragTouchMoveHandler),I(t,"touchmove",this._delayedDragTouchMoveHandler),I(t,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(t,e){e=e||"touch"==t.pointerType&&t,!this.nativeDraggable||e?this.options.supportPointer?O(document,"pointermove",this._onTouchMove):O(document,e?"touchmove":"mousemove",this._onTouchMove):(O(lt,"dragend",this),O(dt,"dragstart",this._onDragStart));try{document.selection?ne((function(){document.selection.empty()})):window.getSelection().removeAllRanges()}catch(t){}},_dragStarted:function(t,e){if(It=!1,dt&&lt){it("dragStarted",this,{evt:e}),this.nativeDraggable&&O(document,"dragover",Vt);var n=this.options;!t&&R(lt,n.dragClass,!1),R(lt,n.ghostClass,!0),$t.active=this,t&&this._appendGhost(),at({sortable:this,name:"start",originalEvent:e})}else this._nulling()},_emulateDragOver:function(){if(Et){this._lastX=Et.clientX,this._lastY=Et.clientY,Zt();for(var t=document.elementFromPoint(Et.clientX,Et.clientY),e=t;t&&t.shadowRoot&&(t=t.shadowRoot.elementFromPoint(Et.clientX,Et.clientY))!==e;)e=t;if(lt.parentNode[tt]._isOutsideThisEl(t),e)do{if(e[tt]&&e[tt]._onDragOver({clientX:Et.clientX,clientY:Et.clientY,target:t,rootEl:e})&&!this.options.dragoverBubble)break;t=e}while(e=e.parentNode);Gt()}},_onTouchMove:function(t){if(Ct){var e=this.options,n=e.fallbackTolerance,o=e.fallbackOffset,r=t.touches?t.touches[0]:t,i=ct&&L(ct,!0),a=ct&&i&&i.a,l=ct&&i&&i.d,s=jt&&Ot&&G(Ot),c=(r.clientX-Ct.clientX+o.x)/(a||1)+(s?s[0]-zt[0]:0)/(a||1),d=(r.clientY-Ct.clientY+o.y)/(l||1)+(s?s[1]-zt[1]:0)/(l||1);if(!$t.active&&!It){if(n&&Math.max(Math.abs(r.clientX-this._lastX),Math.abs(r.clientY-this._lastY))<n)return;this._onDragStart(t,!0)}if(ct){i?(i.e+=c-(wt||0),i.f+=d-(St||0)):i={a:1,b:0,c:0,d:1,e:c,f:d};var u="matrix(".concat(i.a,",").concat(i.b,",").concat(i.c,",").concat(i.d,",").concat(i.e,",").concat(i.f,")");X(ct,"webkitTransform",u),X(ct,"mozTransform",u),X(ct,"msTransform",u),X(ct,"transform",u),wt=c,St=d,Et=r}t.cancelable&&t.preventDefault()}},_appendGhost:function(){if(!ct){var t=this.options.fallbackOnBody?document.body:dt,e=F(lt,!0,jt,!0,t),n=this.options;if(jt){for(Ot=t;"static"===X(Ot,"position")&&"none"===X(Ot,"transform")&&Ot!==document;)Ot=Ot.parentNode;Ot!==document.body&&Ot!==document.documentElement?(Ot===document&&(Ot=q()),e.top+=Ot.scrollTop,e.left+=Ot.scrollLeft):Ot=q(),zt=G(Ot)}R(ct=lt.cloneNode(!0),n.ghostClass,!1),R(ct,n.fallbackClass,!0),R(ct,n.dragClass,!0),X(ct,"transition",""),X(ct,"transform",""),X(ct,"box-sizing","border-box"),X(ct,"margin",0),X(ct,"top",e.top),X(ct,"left",e.left),X(ct,"width",e.width),X(ct,"height",e.height),X(ct,"opacity","0.8"),X(ct,"position",jt?"absolute":"fixed"),X(ct,"zIndex","100000"),X(ct,"pointerEvents","none"),$t.ghost=ct,t.appendChild(ct),X(ct,"transform-origin",xt/parseInt(ct.style.width)*100+"% "+Bt/parseInt(ct.style.height)*100+"%")}},_onDragStart:function(t,e){var n=this,o=t.dataTransfer,r=n.options;it("dragStart",this,{evt:t}),$t.eventCanceled?this._onDrop():(it("setupClone",this),$t.eventCanceled||((pt=Q(lt)).removeAttribute("id"),pt.draggable=!1,pt.style["will-change"]="",this._hideClone(),R(pt,this.options.chosenClass,!1),$t.clone=pt),n.cloneId=ne((function(){it("clone",n),$t.eventCanceled||(n.options.removeCloneOnHide||dt.insertBefore(pt,lt),n._hideClone(),at({sortable:n,name:"clone"}))})),!e&&R(lt,r.dragClass,!0),e?(Mt=!0,n._loopId=setInterval(n._emulateDragOver,50)):(I(document,"mouseup",n._onDrop),I(document,"touchend",n._onDrop),I(document,"touchcancel",n._onDrop),o&&(o.effectAllowed="move",r.setData&&r.setData.call(n,o,lt)),O(document,"drop",n),X(lt,"transform","translateZ(0)")),It=!0,n._dragStartId=ne(n._dragStarted.bind(n,e,t)),O(document,"selectstart",n),Dt=!0,D&&X(document.body,"user-select","none"))},_onDragOver:function(t){var e,n,o,r,i=this.el,a=t.target,l=this.options,s=l.group,c=$t.active,d=At===s,u=l.sort,h=yt||c,p=this,f=!1;if(!Rt){if(void 0!==t.preventDefault&&t.cancelable&&t.preventDefault(),a=N(a,l.draggable,i,!0),k("dragOver"),$t.eventCanceled)return f;if(lt.contains(t.target)||a.animated&&a.animatingX&&a.animatingY||p._ignoreWhileAnimating===a)return I(!1);if(Mt=!1,c&&!l.disabled&&(d?u||(o=st!==dt):yt===this||(this.lastPutMode=At.checkPull(this,c,lt,t))&&s.checkPut(this,c,lt,t))){if(r="vertical"===this._getDirection(t,a),e=F(lt),k("dragOverValid"),$t.eventCanceled)return f;if(o)return st=dt,O(),this._hideClone(),k("revert"),$t.eventCanceled||(ut?dt.insertBefore(lt,ut):dt.appendChild(lt)),I(!0);var g=U(i,l.draggable);if(!g||function(t,e,n){var o=F(U(n.el,n.options.draggable));return e?t.clientX>o.right+10||t.clientX<=o.right&&t.clientY>o.bottom&&t.clientX>=o.left:t.clientX>o.right&&t.clientY>o.top||t.clientX<=o.right&&t.clientY>o.bottom+10}(t,r,this)&&!g.animated){if(g===lt)return I(!1);if(g&&i===t.target&&(a=g),a&&(n=F(a)),!1!==Kt(dt,i,lt,e,a,n,t,!!a))return O(),g&&g.nextSibling?i.insertBefore(lt,g.nextSibling):i.appendChild(lt),st=i,M(),I(!0)}else if(g&&function(t,e,n){var o=F(W(n.el,0,n.options,!0));return e?t.clientX<o.left-10||t.clientY<o.top&&t.clientX<o.right:t.clientY<o.top-10||t.clientY<o.bottom&&t.clientX<o.left}(t,r,this)){var v=W(i,0,l,!0);if(v===lt)return I(!1);if(n=F(a=v),!1!==Kt(dt,i,lt,e,a,n,t,!1))return O(),i.insertBefore(lt,v),st=i,M(),I(!0)}else if(a.parentNode===i){n=F(a);var m,A,y,C=lt.parentNode!==i,E=!function(t,e,n){var o=n?t.left:t.top,r=n?t.right:t.bottom,i=n?t.width:t.height,a=n?e.left:e.top,l=n?e.right:e.bottom,s=n?e.width:e.height;return o===a||r===l||o+i/2===a+s/2}(lt.animated&&lt.toRect||e,a.animated&&a.toRect||n,r),w=r?"top":"left",S=H(a,"top","top")||H(lt,"top","top"),x=S?S.scrollTop:void 0;if(_t!==a&&(A=n[w],Nt=!1,Yt=!E&&l.invertSwap||C),m=function(t,e,n,o,r,i,a,l){var s=o?t.clientY:t.clientX,c=o?n.height:n.width,d=o?n.top:n.left,u=o?n.bottom:n.right,h=!1;if(!a)if(l&&kt<c*r){if(!Nt&&(1===Tt?s>d+c*i/2:s<u-c*i/2)&&(Nt=!0),Nt)h=!0;else if(1===Tt?s<d+kt:s>u-kt)return-Tt}else if(s>d+c*(1-r)/2&&s<u-c*(1-r)/2)return function(t){return Z(lt)<Z(t)?1:-1}(e);return(h=h||a)&&(s<d+c*i/2||s>u-c*i/2)?s>d+c/2?1:-1:0}(t,a,n,r,E?1:l.swapThreshold,null==l.invertedSwapThreshold?l.swapThreshold:l.invertedSwapThreshold,Yt,_t===a),0!==m){var B=Z(lt);do{B-=m,y=st.children[B]}while(y&&("none"===X(y,"display")||y===ct))}if(0===m||y===a)return I(!1);_t=a,Tt=m;var D=a.nextElementSibling,_=!1,T=Kt(dt,i,lt,e,a,n,t,_=1===m);if(!1!==T)return 1!==T&&-1!==T||(_=1===T),Rt=!0,setTimeout(te,30),O(),_&&!D?i.appendChild(lt):a.parentNode.insertBefore(lt,_?D:a),S&&K(S,0,x-S.scrollTop),st=lt.parentNode,void 0===A||Yt||(kt=Math.abs(A-F(a)[w])),M(),I(!0)}if(i.contains(lt))return I(!1)}return!1}function k(l,s){it(l,p,b({evt:t,isOwner:d,axis:r?"vertical":"horizontal",revert:o,dragRect:e,targetRect:n,canSort:u,fromSortable:h,target:a,completed:I,onMove:function(n,o){return Kt(dt,i,lt,e,n,F(n),t,o)},changed:M},s))}function O(){k("dragOverAnimationCapture"),p.captureAnimationState(),p!==h&&h.captureAnimationState()}function I(e){return k("dragOverCompleted",{insertion:e}),e&&(d?c._hideClone():c._showClone(p),p!==h&&(R(lt,yt?yt.options.ghostClass:c.options.ghostClass,!1),R(lt,l.ghostClass,!0)),yt!==p&&p!==$t.active?yt=p:p===$t.active&&yt&&(yt=null),h===p&&(p._ignoreWhileAnimating=a),p.animateAll((function(){k("dragOverAnimationComplete"),p._ignoreWhileAnimating=null})),p!==h&&(h.animateAll(),h._ignoreWhileAnimating=null)),(a===lt&&!lt.animated||a===i&&!a.animated)&&(_t=null),l.dragoverBubble||t.rootEl||a===document||(lt.parentNode[tt]._isOutsideThisEl(t.target),!e&&Jt(t)),!l.dragoverBubble&&t.stopPropagation&&t.stopPropagation(),f=!0}function M(){vt=Z(lt),bt=Z(lt,l.draggable),at({sortable:p,name:"change",toEl:i,newIndex:vt,newDraggableIndex:bt,originalEvent:t})}},_ignoreWhileAnimating:null,_offMoveEvents:function(){I(document,"mousemove",this._onTouchMove),I(document,"touchmove",this._onTouchMove),I(document,"pointermove",this._onTouchMove),I(document,"dragover",Jt),I(document,"mousemove",Jt),I(document,"touchmove",Jt)},_offUpEvents:function(){var t=this.el.ownerDocument;I(t,"mouseup",this._onDrop),I(t,"touchend",this._onDrop),I(t,"pointerup",this._onDrop),I(t,"touchcancel",this._onDrop),I(document,"selectstart",this)},_onDrop:function(t){var e=this.el,n=this.options;vt=Z(lt),bt=Z(lt,n.draggable),it("drop",this,{evt:t}),st=lt&&lt.parentNode,vt=Z(lt),bt=Z(lt,n.draggable),$t.eventCanceled||(It=!1,Yt=!1,Nt=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),oe(this.cloneId),oe(this._dragStartId),this.nativeDraggable&&(I(document,"drop",this),I(e,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),D&&X(document.body,"user-select",""),X(lt,"transform",""),t&&(Dt&&(t.cancelable&&t.preventDefault(),!n.dropBubble&&t.stopPropagation()),ct&&ct.parentNode&&ct.parentNode.removeChild(ct),(dt===st||yt&&"clone"!==yt.lastPutMode)&&pt&&pt.parentNode&&pt.parentNode.removeChild(pt),lt&&(this.nativeDraggable&&I(lt,"dragend",this),Qt(lt),lt.style["will-change"]="",Dt&&!It&&R(lt,yt?yt.options.ghostClass:this.options.ghostClass,!1),R(lt,this.options.chosenClass,!1),at({sortable:this,name:"unchoose",toEl:st,newIndex:null,newDraggableIndex:null,originalEvent:t}),dt!==st?(vt>=0&&(at({rootEl:st,name:"add",toEl:st,fromEl:dt,originalEvent:t}),at({sortable:this,name:"remove",toEl:st,originalEvent:t}),at({rootEl:st,name:"sort",toEl:st,fromEl:dt,originalEvent:t}),at({sortable:this,name:"sort",toEl:st,originalEvent:t})),yt&&yt.save()):vt!==gt&&vt>=0&&(at({sortable:this,name:"update",toEl:st,originalEvent:t}),at({sortable:this,name:"sort",toEl:st,originalEvent:t})),$t.active&&(null!=vt&&-1!==vt||(vt=gt,bt=mt),at({sortable:this,name:"end",toEl:st,originalEvent:t}),this.save())))),this._nulling()},_nulling:function(){it("nulling",this),dt=lt=st=ct=ut=pt=ht=ft=Ct=Et=Dt=vt=bt=gt=mt=_t=Tt=yt=At=$t.dragged=$t.ghost=$t.clone=$t.active=null,Xt.forEach((function(t){t.checked=!0})),Xt.length=wt=St=0},handleEvent:function(t){switch(t.type){case"drop":case"dragend":this._onDrop(t);break;case"dragenter":case"dragover":lt&&(this._onDragOver(t),function(t){t.dataTransfer&&(t.dataTransfer.dropEffect="move"),t.cancelable&&t.preventDefault()}(t));break;case"selectstart":t.preventDefault()}},toArray:function(){for(var t,e=[],n=this.el.children,o=0,r=n.length,i=this.options;o<r;o++)N(t=n[o],i.draggable,this.el,!1)&&e.push(t.getAttribute(i.dataIdAttr)||ee(t));return e},sort:function(t,e){var n={},o=this.el;this.toArray().forEach((function(t,e){var r=o.children[e];N(r,this.options.draggable,o,!1)&&(n[t]=r)}),this),e&&this.captureAnimationState(),t.forEach((function(t){n[t]&&(o.removeChild(n[t]),o.appendChild(n[t]))})),e&&this.animateAll()},save:function(){var t=this.options.store;t&&t.set&&t.set(this)},closest:function(t,e){return N(t,e||this.options.draggable,this.el,!1)},option:function(t,e){var n=this.options;if(void 0===e)return n[t];var o=ot.modifyOption(this,t,e);n[t]=void 0!==o?o:e,"group"===t&&Ut(n)},destroy:function(){it("destroy",this);var t=this.el;t[tt]=null,I(t,"mousedown",this._onTapStart),I(t,"touchstart",this._onTapStart),I(t,"pointerdown",this._onTapStart),this.nativeDraggable&&(I(t,"dragover",this),I(t,"dragenter",this)),Array.prototype.forEach.call(t.querySelectorAll("[draggable]"),(function(t){t.removeAttribute("draggable")})),this._onDrop(),this._disableDelayedDragEvents(),Pt.splice(Pt.indexOf(this.el),1),this.el=t=null},_hideClone:function(){if(!ft){if(it("hideClone",this),$t.eventCanceled)return;X(pt,"display","none"),this.options.removeCloneOnHide&&pt.parentNode&&pt.parentNode.removeChild(pt),ft=!0}},_showClone:function(t){if("clone"===t.lastPutMode){if(ft){if(it("showClone",this),$t.eventCanceled)return;lt.parentNode!=dt||this.options.group.revertClone?ut?dt.insertBefore(pt,ut):dt.appendChild(pt):dt.insertBefore(pt,lt),this.options.group.revertClone&&this.animate(lt,pt),X(pt,"display",""),ft=!1}}else this._hideClone()}},Lt&&O(document,"touchmove",(function(t){($t.active||It)&&t.cancelable&&t.preventDefault()})),$t.utils={on:O,off:I,css:X,find:j,is:function(t,e){return!!N(t,e,t,!1)},extend:function(t,e){if(t&&e)for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t},throttle:$,closest:N,toggleClass:R,clone:Q,index:Z,nextTick:ne,cancelNextTick:oe,detectDirection:Wt,getChild:W},$t.get=function(t){return t[tt]},$t.mount=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];e[0].constructor===Array&&(e=e[0]),e.forEach((function(t){if(!t.prototype||!t.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(t));t.utils&&($t.utils=b(b({},$t.utils),t.utils)),ot.mount(t)}))},$t.create=function(t,e){return new $t(t,e)},$t.version="1.15.0";var re,ie,ae,le,se,ce,de=[],ue=!1;function he(){de.forEach((function(t){clearInterval(t.pid)})),de=[]}function pe(){clearInterval(ce)}var fe=$((function(t,e,n,o){if(e.scroll){var r,i=(t.touches?t.touches[0]:t).clientX,a=(t.touches?t.touches[0]:t).clientY,l=e.scrollSensitivity,s=e.scrollSpeed,c=q(),d=!1;ie!==n&&(ie=n,he(),re=e.scroll,r=e.scrollFn,!0===re&&(re=J(n,!0)));var u=0,h=re;do{var p=h,f=F(p),g=f.top,v=f.bottom,m=f.left,b=f.right,A=f.width,y=f.height,C=void 0,E=void 0,w=p.scrollWidth,S=p.scrollHeight,x=X(p),B=p.scrollLeft,D=p.scrollTop;p===c?(C=A<w&&("auto"===x.overflowX||"scroll"===x.overflowX||"visible"===x.overflowX),E=y<S&&("auto"===x.overflowY||"scroll"===x.overflowY||"visible"===x.overflowY)):(C=A<w&&("auto"===x.overflowX||"scroll"===x.overflowX),E=y<S&&("auto"===x.overflowY||"scroll"===x.overflowY));var _=C&&(Math.abs(b-i)<=l&&B+A<w)-(Math.abs(m-i)<=l&&!!B),T=E&&(Math.abs(v-a)<=l&&D+y<S)-(Math.abs(g-a)<=l&&!!D);if(!de[u])for(var k=0;k<=u;k++)de[k]||(de[k]={});de[u].vx==_&&de[u].vy==T&&de[u].el===p||(de[u].el=p,de[u].vx=_,de[u].vy=T,clearInterval(de[u].pid),0==_&&0==T||(d=!0,de[u].pid=setInterval(function(){o&&0===this.layer&&$t.active._onTouchMove(se);var e=de[this.layer].vy?de[this.layer].vy*s:0,n=de[this.layer].vx?de[this.layer].vx*s:0;"function"==typeof r&&"continue"!==r.call($t.dragged.parentNode[tt],n,e,t,se,de[this.layer].el)||K(de[this.layer].el,n,e)}.bind({layer:u}),24))),u++}while(e.bubbleScroll&&h!==c&&(h=J(h,!1)));ue=d}}),30),ge=function(t){var e=t.originalEvent,n=t.putSortable,o=t.dragEl,r=t.activeSortable,i=t.dispatchSortableEvent,a=t.hideGhostForTarget,l=t.unhideGhostForTarget;if(e){var s=n||r;a();var c=e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:e,d=document.elementFromPoint(c.clientX,c.clientY);l(),s&&!s.el.contains(d)&&(i("spill"),this.onSpill({dragEl:o,putSortable:n}))}};function ve(){}function me(){}ve.prototype={startIndex:null,dragStart:function(t){var e=t.oldDraggableIndex;this.startIndex=e},onSpill:function(t){var e=t.dragEl,n=t.putSortable;this.sortable.captureAnimationState(),n&&n.captureAnimationState();var o=W(this.sortable.el,this.startIndex,this.options);o?this.sortable.el.insertBefore(e,o):this.sortable.el.appendChild(e),this.sortable.animateAll(),n&&n.animateAll()},drop:ge},C(ve,{pluginName:"revertOnSpill"}),me.prototype={onSpill:function(t){var e=t.dragEl,n=t.putSortable||this.sortable;n.captureAnimationState(),e.parentNode&&e.parentNode.removeChild(e),n.animateAll()},drop:ge},C(me,{pluginName:"removeOnSpill"}),$t.mount(new function(){function t(){for(var t in this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0},this)"_"===t.charAt(0)&&"function"==typeof this[t]&&(this[t]=this[t].bind(this))}return t.prototype={dragStarted:function(t){var e=t.originalEvent;this.sortable.nativeDraggable?O(document,"dragover",this._handleAutoScroll):this.options.supportPointer?O(document,"pointermove",this._handleFallbackAutoScroll):e.touches?O(document,"touchmove",this._handleFallbackAutoScroll):O(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(t){var e=t.originalEvent;this.options.dragOverBubble||e.rootEl||this._handleAutoScroll(e)},drop:function(){this.sortable.nativeDraggable?I(document,"dragover",this._handleAutoScroll):(I(document,"pointermove",this._handleFallbackAutoScroll),I(document,"touchmove",this._handleFallbackAutoScroll),I(document,"mousemove",this._handleFallbackAutoScroll)),pe(),he(),clearTimeout(Y),Y=void 0},nulling:function(){se=ie=re=ue=ce=ae=le=null,de.length=0},_handleFallbackAutoScroll:function(t){this._handleAutoScroll(t,!0)},_handleAutoScroll:function(t,e){var n=this,o=(t.touches?t.touches[0]:t).clientX,r=(t.touches?t.touches[0]:t).clientY,i=document.elementFromPoint(o,r);if(se=t,e||this.options.forceAutoScrollFallback||x||S||D){fe(t,this.options,i,e);var a=J(i,!0);!ue||ce&&o===ae&&r===le||(ce&&pe(),ce=setInterval((function(){var i=J(document.elementFromPoint(o,r),!0);i!==a&&(a=i,he()),fe(t,n.options,i,e)}),10),ae=o,le=r)}else{if(!this.options.bubbleScroll||J(i,!0)===q())return void he();fe(t,this.options,J(i,!1),!1)}}},C(t,{pluginName:"scroll",initializeByDefault:!0})}),$t.mount(me,ve);const be=$t,Ae=(()=>{const t=document.querySelector("#board"),e=a("div","horse",null,"🐴",null),n=a("div","carrot",null,"🥕",null),o=document.getElementById("play-btn");function r(t){t.forEach((t=>{i(t).classList.add("neighbour")}))}function i(e){return t.querySelectorAll(".droppable")[e]}function a(t,e,n,o,r){const i=document.createElement(t);return e&&(i.id=e),n&&n.forEach((t=>i.classList.add(t))),o&&(i.textContent=o),r&&r.forEach((t=>i.appendChild(t))),i}function l(t){i(t).appendChild(e)}return{initialiseBoard:function(){for(let e=0;e<8;e++){const n=[];for(let t=0;t<8;t++){const o=8*e+t,r=a("td",null,["droppable"],null,null);r.setAttribute("data-index",o),n.push(r),be.create(r,{group:"cell",emptyInsertThreshold:0})}const o=a("tr",null,null,null,n);t.appendChild(o)}t.querySelector(".droppable").appendChild(e),t.querySelector(".droppable:nth-child(6)").appendChild(n)},moveHorse:l,getHorsePosition:function(){const t=e.closest("td");return parseInt(t.getAttribute("data-index"),10)},getCarrotPosition:function(){const t=n.closest("td");return parseInt(t.getAttribute("data-index"),10)},playMoves:async function(t,e){for await(const t of e)r(t),await new Promise((t=>setTimeout(t,500)));!async function(t){for(let e=0;e<64;e++)t.includes(e)?i(e).classList.add("shortest"):i(e).classList.add("hide");for await(const e of t)l(e),await new Promise((t=>setTimeout(t,400)))}(t)},resetBoardColors:function(){t.querySelectorAll(".droppable").forEach((t=>{t.classList.remove("hide"),t.classList.remove("neighbour"),t.classList.remove("shortest")}))},getPlayButton:function(){return o}}})(),ye=Ae,Ce=(()=>{const t=(()=>{const t=[];return{empty:function(){t.splice(0,t.length)},save:function(e){t.push(e)},output:function(){console.log(JSON.stringify(t))},get:function(){return t}}})();return{knightMoves:function(e,n){function o(t){const e=[-1,-1,-2,-2,1,1,2,2],n=[-2,2,-1,1,2,-2,1,-1],o=parseInt(t/8,10),r=t%8,i=[];for(let t=0;t<e.length;t++){const a=o+e[t],l=r+n[t];a<0||l<0||a>7||l>7||i.push(8*a+l)}return i}if(e===n)return[e];const r=[e],i=new Set(r),a=new Map([[e,0]]),l=new Map([[e,-1]]);let s=!1;for(;r.length>0&&!s;){const e=r.shift(),c=o(e).filter((t=>!i.has(t)));c.length>0&&t.save(c),c.forEach((t=>{i.add(t),r.push(t),a.set(t,1+a.get(e)),l.set(t,e),t===n&&(s=!0)}))}const c=[];let d=n;for(;-1!==d;)c.unshift(d),d=l.get(d);return c},neighbourStorage:t}})(),Ee=(ye.getPlayButton().addEventListener("click",(()=>{Ee.animate()})),{animate:function(){ye.resetBoardColors(),Ce.neighbourStorage.empty();const t=Ce.knightMoves(ye.getHorsePosition(),ye.getCarrotPosition()),e=Ce.neighbourStorage.get();console.log(function(t,e,n){function o(t){return[parseInt(t/8,10),parseInt(t%8,10)]}let r=`${JSON.stringify(o(t))} -> ${JSON.stringify(o(e))} in ${n.length-1} moves:\n`;const i=[];return n.forEach((t=>{i.push(o(t))})),r+=JSON.stringify(i),r}(ye.getHorsePosition(),ye.getCarrotPosition(),t)),ye.playMoves(t,e)}});ye.initialiseBoard()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,